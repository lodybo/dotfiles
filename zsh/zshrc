# Path to .dotfiles
export DOTFILES="$HOME/.dotfiles"

# If you come from bash you might have to change your $PATH.
# Done fancy, because we can: https://stackoverflow.com/a/18077919/1053777
path=("$HOME/bin" "/usr/local/bin" "$DOTFILES/bin" $path)
export PATH

# Set the fpath
fpath=("$DOTFILES/zsh/fpath" $fpath)

# Initialize completion system
autoload -Uz compinit
compinit

# Source my aliases, functions, options and other stuff
source "$DOTFILES/zsh/bootstrap.sh"

# Load in macOS aliases if we are on macOS, else load the Linux ones
if [[ "$OSTYPE" == "darwin"* ]]; then
    source "$DOTFILES/zsh/macos/bootstrap.sh"
else
    source "$DOTFILES/zsh/linux/bootstrap.sh"
fi

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
if [[ "$OSTYPE" == "darwin"* ]]; then
    source "$DOTFILES/zsh/themes/lodybo-macos.zsh-theme"
else
    source "$DOTFILES/zsh/themes/lodybo.zsh-theme"
fi

# Enable GitHub Copilot CLI shortcuts
eval "$(gh copilot alias -- zsh)"

# Enable Gitea autocomplete
PROG=tea _CLI_ZSH_AUTOCOMPLETE_HACK=1 source "~/Library/Application Support/tea/autocomplete.zsh"

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# Load local config if it exists
if [ -f ~/.zshrc_local ]; then
    source ~/.zshrc_local
fi

source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
